@model WebMicroondas.ViewsModels.MicroondasViewModel

@{
    ViewBag.Title = "Página Inicial";
}

<h2>Micro-ondas na Web</h2>

<!-- Verifica se possui algum erro -->

@if (!ViewData.ModelState.IsValid)
{
    <div>
        <h4>Erros:</h4>
        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
    </div>
}

<table style="width: 100%; height: 50vh; border: none;">
    <tr>
        <td align="center" valign="middle">
            <form method="post">
                <div class="form-group">
                    <label for="Tempo" class="control-label">Tempo:</label>
                    <input id="Tempo" name="Tempo" value="@(ViewBag.TempoInput)" onclick="setCurrentInput('Tempo')"> <!-- Após ter enviado o valor para a Controller ele exibe o mesmo novamente no input -->
                </div>
                <div class="form-group">
                    <label for="Potencia" class="control-label">Potência:</label>
                    <input id="Potencia" name="Potencia" value="@(ViewBag.Potencia)" onclick="setCurrentInput('Potencia')"> <!-- Ocorre o mesmo aqui -->
                </div>
                <div style="margin-top: 20px;">
                    <table border="0" style="border-collapse: collapse; text-align: center;">
                        <tr>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(1)">1</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(2)">2</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(3)">3</button></td>
                        </tr>
                        <tr>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(4)">4</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(5)">5</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(6)">6</button></td>
                        </tr>
                        <tr>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(7)">7</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(8)">8</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(9)">9</button></td>
                        </tr>
                        <tr>
                            <td><button type="submit" formaction="/Microondas/CancelarAquecimento" class="btn btn-danger" onclick="pausarAquecimento()" style="margin-right: 10px;">Cancelar</button></td>
                            <td><button type="button" class="btn btn-toolbar" onclick="appendValue(0)">0</button></td>
                            <td><button type="submit" formaction="/Microondas/IniciarAquecimento" class="btn btn-success" style="margin-left: 10px;">Iniciar</button></td>
                        </tr>
                        <tr></tr>
                        <tr>
                            <td>
                                <button type="button" class="btn btn-default" onclick="focusAndSetInput('Tempo')">Tempo⏳</button> <!-- Funcionalidade feita usando o JS, para quando clicar nesse botão, colocar o foco no input do mesmo -->
                            </td>
                            <td>
                                <button type="button" class="btn btn-default" onclick="focusAndSetInput('Potencia')">Potência📶</button> <!-- Mesma coisa -->
                            </td>
                        </tr>
                    </table>
                    <div id="mensagem"></div> <!-- Mensagem de aquecimento que é exibida ao usuário -->
                    <input id="Mensagem" name="Mensagem" value="@(ViewBag.MensagemDoMicroondas)"> <!-- Input disfarçado onde envia a situação da string de "Aquecimento Iniciado" para a controller  -->
                    <input id="microondasParado" name="microondasParado" value="@(ViewBag.AquecimentoParado)"> <!-- Input disfarçado onde envia a situação  se está aquecendo ou não para a controller -->
                    
                </div>
            </form>
        </td>
    </tr>
</table>
<a href="/Aquecimento/Create" type="button"  class="btn btn-success" style="margin-left: 10px;">Cadastrar Aquecimentos</a>
<div>
    <!-- Tabela de aquecimentos pré-definidos -->
    <h3>Aquecimentos Pré-definidos</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Alimento</th>
                <th>Tempo</th>
                <th>Potência</th>
                <th>Ação</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.AquecimentoPreDefinidos)
            {
                <tr>
                    <td>@item.Nome</td>
                    <td>@item.Alimento</td>
                    <td>@item.Tempo</td>
                    <td>@item.Potencia</td>
                    <td>@item.InstrucoesComplementares</td>
                    <td>
                        <form method="post" action="/Microondas/IniciarAquecimentoPreDefinido">
                            <input type="hidden" name="Tempo" value="@item.Tempo" />
                            <input type="hidden" name="Potencia" value="@item.Potencia" />
                            <input type="hidden" name="mensagemDeAquecimento" value="@item.MensagemDeAquecimento" />
                            <button type="submit" class="btn btn-info">Selecionar</button>
                        </form>

                    </td>
                    <td>
                    </td>
                </tr>
            }
            @foreach (var item in Model.AquecimentoPreDB)
            {
                <tr>
                    <td><i>@item.Nome</i></td>
                    <td><i>@item.Alimento</i></td>
                    <td>@item.Tempo</td>
                    <td>@item.Potencia</td>
                    <td><i>@item.InstrucoesComplementares</i></td>
                    <td>
                        <form method="post" action="/Microondas/IniciarAquecimentoPreDefinido">
                            <input type="hidden" name="Tempo" value="@item.Tempo" />
                            <input type="hidden" name="Potencia" value="@item.Potencia" />
                            <input type="hidden" name="mensagemDeAquecimento" value="@item.MensagemDeAquecimento" />
                            <button type="submit" class="btn btn-info">Selecionar</button>
                        </form>

                    </td>
                    <td>
                        <a href="@Url.Action("Edit", "Aquecimento", new { id = item.Id })">Editar</a> |
                        <a href="@Url.Action("Delete", "Aquecimento", new { id = item.Id })">Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    // Variável global para armazenar o ID do campo selecionado
    let currentInput = null;
    let contagemInterval = null; // Variável para armazenar o intervalo da contagem
    let tempoRestante = 0; // Variável para armazenar o tempo restante
    let pontos = ""; // Variável para os pontos exibidos

    let mensagemInput = document.getElementById("Mensagem");
    let mensagemExibidaEmTela = document.getElementById("mensagem");
    let mensagemParado = document.getElementById("microondasParado").value;
    

    // Define o campo atual e aplica o foco
    function focusAndSetInput(inputId) {
        currentInput = inputId;
        const input = document.getElementById(inputId);
        input.focus();
    }

    // Define o campo atual sem focar
    function setCurrentInput(inputId) {
        currentInput = inputId;
    }

    // Adiciona o valor clicado ao campo selecionado
    function appendValue(value) {
        if (currentInput) {
            const input = document.getElementById(currentInput);
            input.value = input.value + value; // Adiciona o valor ao final do campo
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        tempoRestante = @(ViewBag.TempoJS ?? 0); // Obtém o tempo da Controller
        let potencia = @(ViewBag.Potencia ?? 1); // Obtém a potência da Controller
        
        mensagemExibidaEmTela = document.getElementById("mensagem");
        mensagemInput = document.getElementById("Mensagem");
        let mensagemInicial = mensagemInput.value;

        let simbolo = "@(ViewBag.Simbolo)" && "@(ViewBag.Simbolo)" !== "" ? "@(ViewBag.Simbolo)" : "."; // Símbolo ou ponto padrão
        

        // Verifica se a mensagem do input é "Aquecimento Parado!". Caso Seja executa o if, Caso não seja vai pro else
        if (mensagemParado === "Aquecimento Parado!" && tempoRestante > 0) {
            mensagemExibidaEmTela.innerHTML = mensagemInicial;
            mensagemInput.value = mensagemInicial; // Atualiza o input disfarçado


            
             pontos = "";
            contagemInterval = setInterval(function () {

                // Adiciona os pontos de acordo com a potência
                for (let i = 0; i < potencia; i++) {
                    pontos += simbolo; // Adiciona um ponto por iteração
                }

                // Se a potência for maior que 1, adicione um espaço após os pontos
                if (potencia > 1) {
                    pontos += " "; // Adiciona espaço entre os blocos de pontos
                }

                // Atualiza a mensagem exibida no elemento
                mensagemExibidaEmTela.innerHTML = mensagemInicial + pontos;

                // Atualiza o valor do input com a mensagem
                mensagemInput.value = mensagemExibidaEmTela.innerHTML;

                // Decrementa o tempo restante
                tempoRestante--;

                // Atualiza o valor no input de tempo
                let tempoInput = document.getElementById("Tempo");
                if (tempoInput) tempoInput.value = tempoRestante;

                // Finaliza o aquecimento quando o tempo chega a zero
                if (tempoRestante <= 0) {
                    tempoInput.value = 0;
                    clearInterval(contagemInterval); // Para a contagem
                    mensagemExibidaEmTela.innerHTML = "Aquecimento Concluído!";
                    mensagemInput.value = "Aquecimento Concluído!"; // Atualiza o input disfarçado
                }
            }, 1000); // Atualiza a cada segundo
        }
        else {

            if (tempoRestante > 0) {
                let mensagemInput = document.getElementById("Mensagem");

                mensagemExibidaEmTela.innerHTML = "Aquecimento Iniciado";
                mensagemInput.value = "Aquecimento Iniciado";

                contagemInterval = setInterval(function () {
                    for (let i = 0; i < potencia; i++) {
                        pontos += simbolo;
                    }

                    if (potencia > 1) {
                        pontos += " ";
                    }

                    mensagemExibidaEmTela.innerHTML = "Aquecimento Iniciado " + pontos;

                    mensagemInput.value = mensagemExibidaEmTela.innerHTML;

                    tempoRestante--;

                    let tempoInput = document.getElementById("Tempo");
                    if (tempoInput) tempoInput.value = tempoRestante;

                    if (tempoRestante < 0) {
                        tempoInput.value = 0;
                        clearInterval(contagemInterval);
                        mensagemExibidaEmTela.innerHTML = "Aquecimento Concluído!";
                        mensagemInput.value = "Aquecimento Concluído!";
                    }
                }, 1000);
            }
        }


    });
</script>
